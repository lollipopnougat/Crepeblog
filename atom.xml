<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank</title>
  
  
  <link href="/Crepeblog/atom.xml" rel="self"/>
  
  <link href="https://crepe.coding.me/Crepeblog/"/>
  <updated>2019-02-11T12:59:58.177Z</updated>
  <id>https://crepe.coding.me/Crepeblog/</id>
  
  <author>
    <name>Frank C.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>春节快乐</title>
    <link href="https://crepe.coding.me/Crepeblog/2019/02/04/%E6%98%A5%E8%8A%82%E5%BF%AB%E4%B9%90/"/>
    <id>https://crepe.coding.me/Crepeblog/2019/02/04/春节快乐/</id>
    <published>2019-02-04T12:38:56.000Z</published>
    <updated>2019-02-11T12:59:58.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="春节快乐"><a href="#春节快乐" class="headerlink" title="春节快乐"></a>春节快乐</h2><p>祝各位春节快乐,新的一年大家也要继续努力鸭!<br>笔者还准备了礼物送给大家，点击下面的阅读全文查看</p><a id="more"></a><h2 id="献上笔者绘制的Peppa-Pig-社会猪佩奇"><a href="#献上笔者绘制的Peppa-Pig-社会猪佩奇" class="headerlink" title="献上笔者绘制的Peppa Pig(社会猪佩奇)"></a>献上笔者绘制的Peppa Pig(社会猪佩奇)</h2><p><img src="https://cdn.jsdelivr.net/gh/lollipopnougat/website-calculator/img/SpF.png" alt="Happy New Year!"></p><h2 id="送上猪年祝福语"><a href="#送上猪年祝福语" class="headerlink" title="送上猪年祝福语"></a>送上猪年祝福语</h2><ul><li>春风初度到猪年，欢歌声声震云天。千家万户乐翩翩，迎福纳财笑开颜。我有祝福在心田，悄悄送到你身边。愿你猪年爱情甜，合家快乐福无边。</li><li>朝霞映满天，盛世耀猪年。歌美舞翩翩，快乐太平年。瑞雪一片片，幸福绕猪年。春风暖心田，欢度团圆年。猪年到了，愿你快乐绵绵！</li><li>猪年好，猪年妙，猪年的歌声满天飘；猪年灿，猪年暖，猪年的幸福享不完；猪年旺，猪年香，猪年的祝福分外长。愿你猪年心飞扬，万事皆顺畅！</li><li>除夕到来菩萨忙，各路神仙送吉祥：财神送你金元宝，寿星保你身安康，文殊给你大智慧，观音佑你幸福长，弥勒让你乐不断，福星伴你走四方！春节快乐！</li><li>春风叩开猪年的门扉，对联贴满猪年的庭院，欢畅陶醉猪年的日子，幸福温暖猪年的时光，情意铺满猪年的道路。猪年到了，愿你的生活灿烂美满。</li><li>猪年就要到了，新春祝福提前到。祝你有人缘，事业顺利不心烦；祝你有情缘，爱情甜蜜心也甜；祝你有财源，腰包鼓鼓金钱花不完。最后祝你猪年大吉！</li><li>一张圆桌，合家团座笑呵呵；一顿晚餐，美味家肴喜庆多；一杯美酒，装满幸福和快乐；一个除夕，张灯结彩好喜气；一条祝福，愿你多财又多福；新年到，愿你全家幸福乐逍遥！</li><li>春节到处乐洋洋，祝福语先到身旁，心意情意都献上，愿您接纳永收藏，愿您事业财源广，愿您暖和体安康，愿您烦恼忧愁散，愿您春节安康！</li></ul><h3 id="绘制佩奇使用的是PS的钢笔"><a href="#绘制佩奇使用的是PS的钢笔" class="headerlink" title="绘制佩奇使用的是PS的钢笔"></a>绘制佩奇使用的是PS的钢笔</h3><p><img src="https://cdn.jsdelivr.net/gh/lollipopnougat/website-calculator/img/PeppaPig1.jpg" alt="Happy New Year!"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;春节快乐&quot;&gt;&lt;a href=&quot;#春节快乐&quot; class=&quot;headerlink&quot; title=&quot;春节快乐&quot;&gt;&lt;/a&gt;春节快乐&lt;/h2&gt;&lt;p&gt;祝各位春节快乐,新的一年大家也要继续努力鸭!&lt;br&gt;笔者还准备了礼物送给大家，点击下面的阅读全文查看&lt;/p&gt;
    
    </summary>
    
    
      <category term="节日祝福" scheme="https://crepe.coding.me/Crepeblog/tags/%E8%8A%82%E6%97%A5%E7%A5%9D%E7%A6%8F/"/>
    
      <category term="春节" scheme="https://crepe.coding.me/Crepeblog/tags/%E6%98%A5%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>HTML (一)</title>
    <link href="https://crepe.coding.me/Crepeblog/2019/01/25/HTML%20(%E4%B8%80)/"/>
    <id>https://crepe.coding.me/Crepeblog/2019/01/25/HTML (一)/</id>
    <published>2019-01-25T13:36:08.000Z</published>
    <updated>2019-02-11T12:59:58.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML 指超文本标记语言</p><blockquote><p>HTML 是通向 WEB 技术世界的钥匙。</p></blockquote><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HTML是现在世界通用的超文本标记语言，通过它，可以实现图片、链接、音乐以及程序等等多种元素。<br>现如今，HTML已经是程序员必须掌握的一项基本功。</p><h2 id="HTML发展史"><a href="#HTML发展史" class="headerlink" title="HTML发展史"></a>HTML发展史</h2><p>HTML没有1.0，因为关于它的初版存在争议，1995年HTML 2.0面世，<br>1997年由国际官方组织W3C推出了HTML 3.2以及HTML 4.0标准，<br>后面W3C(万维网联盟)也渐渐变成Web技术领域的权威，经过漫长的演变，2014年，HTML 5标准最终面世。</p><blockquote><p><em>HTML 2.0——1995年11月，RFC 1866发布</em>HTML 3.2——1997年1月14日，W3C发布推荐标准<br><em>HTML 4.0——1997年12月18日，W3C发布推荐标准</em>HTML 4.01——1999年12月24日，W3C发布推荐标准<br>*HTML 5——2014年10月28日，W3C发布推荐标准</p></blockquote><h2 id="HTML5编辑规范"><a href="#HTML5编辑规范" class="headerlink" title="HTML5编辑规范"></a>HTML5编辑规范</h2><ol><li>文件拓展名默认使用htm或者html，便于操作系统或者程序辨认文件，而图片则基本上存为gif或jpg</li><li>浏览器默认忽视回车符，不过为了方便阅览，人们还是会习惯地在写完一段代码后进行回车</li><li>标记符号用尖括号括起来，带斜杠的元素表示该标记说明结束，大多数标记符必须成对使用，用以说明起始和结束。</li><li>必须使用半角而不是全角字符</li><li>HTML注释<code>&lt;!--注释内容--&gt;</code>的内容不给予显示。</li></ol><h2 id="这是笔者写的较为详细的一个入门页面"><a href="#这是笔者写的较为详细的一个入门页面" class="headerlink" title="这是笔者写的较为详细的一个入门页面"></a>这是笔者写的较为详细的一个入门页面</h2><p><a href="https://lollipopnougat.github.io/website-calculator/html/HTML1.html" target="_blank" rel="noopener">HTML入门·一</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;p&gt;HTML 指超文本标记语言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTML 是通向 WEB 技术世界的钥匙。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://crepe.coding.me/Crepeblog/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell (一)</title>
    <link href="https://crepe.coding.me/Crepeblog/2019/01/17/PowerShell%20(%E4%B8%80)/"/>
    <id>https://crepe.coding.me/Crepeblog/2019/01/17/PowerShell (一)/</id>
    <published>2019-01-17T11:48:41.000Z</published>
    <updated>2019-02-11T12:59:58.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><p>PowerShell 是一种命令行外壳程序和脚本环境，<br>使命令行用户和脚本编写者可以方便地使用 .NET Framework的强大功能。</p><p><img src="https://cdn.jsdelivr.net/gh/lollipopnougat/website-calculator/img/powershell.png" alt="PowerShell"></p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>PowerShell是运行在Windows操作系统上实现对系统以及应用程序进行管理自动化的命令行脚本环境，<br>PowerShell需要.NET环境的支持，借助 <strong>.NET Framework</strong>平台强大的类库，几乎让一切都成为可能。<br>微软起“PowerShell”这个名字并不是夸夸其谈，它完全支持对象，其可读性，易用性，毫不夸张的说可以居所有Shell之首。</p><h2 id="受众"><a href="#受众" class="headerlink" title="受众"></a>受众</h2><p>Windows PowerShell 入门主要面向IT 专业人员、程序员和高级用户。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>通过解决长期存在的问题并添加一些新的功能，Windows PowerShell 旨在改进命令行和脚本环境。<br>PowerShell以 <strong>.NET Framework</strong>为平台，接收和返回.NET对象，此举为管理和配置微软系统带来了新的方法和工具。<br>PowerShell推出了一个功能强大的命令叫做<code>cmdlet</code>,所有的cmdlet命令都遵循动词-名词这样语法结构。<br>如<code>Get-Command</code>, <code>Get-Process</code>等，<br>即使从来没有接触过PowerShell，也很容易能够明白命令的作用。<br>如<code>Get-Process</code>命令的意思就是获取所有的进程。</p><h2 id="新的脚本语言"><a href="#新的脚本语言" class="headerlink" title="新的脚本语言"></a>新的脚本语言</h2><p>由于以下原因，Windows PowerShell 使用它自己的语言，而不是重用现有的语言：<br>Windows PowerShell 需要用于管理.NET 对象的语言。该语言需要为使用cmdlet 提供一致的环境。<br>该语言需要支持复杂的任务，而不会使简单的任务变得更复杂。 该语言需要与在.NET编程中使用的高级语言（如C#）一致。</p><ol><li><p>PS1文件<br>一个PowerShell脚本其实就是一个简单的文本文件，这个文件包含了一系列PowerShell命令，<br>每个命令显示为独立的一行，对于被视为PowerShell脚本的文本文件，它的文件名需要使用.PS1扩展。</p></li><li><p>执行权限<br>为防止恶意脚本的执行，PowerShell有一个执行策略，默认情况下，这个执行策略被设为受限的（<code>Restricted</code>），<br>意味着PowerShell脚本无法执行，你可以使用下面的cmdlet命令确定当前的执行策略：</p><blockquote><ul><li><code>Get-ExecutionPolicy</code>你可以选择使用的执行策略有：</li><li><code>Restricted</code> -脚本不能运行。 </li><li><code>RemoteSigned</code> - 本地创建的脚本可以运行，但网上下载的脚本不能运行（除非它们拥有由受信任的发布者签署的数字签名）。 </li><li><code>AllSigned</code> – 仅当脚本由受信任的发布者签名才能运行。 </li><li><code>Unrestricted</code> –脚本执行不受限制，不管来自哪里，也不管它们是否有签名。</li></ul></blockquote></li></ol><p>你可以使用下面的cmdlet命令设置PowerShell的执行策略：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> &lt;policy name&gt;</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>运行脚本<br>如果你想从命令行运行一个可执行文件，多年来一个永恒不变的方法是，<br>在命令行转到该执行文件所在的位置，然后键入该执行文件的名称，<br>但这个古老的方法现在却不能适用于PowerShell可执行脚本了。<br>如果你想执行一个PowerShell脚本，通常必须键入完整的路径和文件名，<br>例如，假设你要运行一个名为a.ps1的脚本，你可以键入：<br><code>C:\Scripts\aps1</code><br>最大的例外是，如果PowerShell脚本文件刚好位于你的系统目录中，<br>那么你可以直接在命令提示符后键入脚本文件名即可运行，如：<br><code>.\a.ps1</code> 注意前面需要加上<code>.\</code>，这和Linux下执行Shell脚本的方法如出一辙。</p></li><li><p>管道<br>管道的作用是将一个命令的输出作为另一个命令的输入，两个命令（或cmdlet）之间只需要用管道符号（<code>|</code>）连接即可。<br>为了帮助你了解管道是如何工作的，我们以一个例子进行说明，假设你想创建运行在服务器上的进程列表，并按进程的ID号进行排序，<br>可以使用<code>Get-Process</code> cmdlet命令获得进程列表，但默认情况下列表不会排序，<br>如果将这个cmdlet命令的输出用管道输送给<code>Sort-Object ID</code>命令，进程列表将会按进程ID号进行排序，如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Process</span> | <span class="built_in">Sort-Object</span> ID</span><br></pre></td></tr></table></figure></li><li><p>变量<br>虽然可以使用管道将一个命令的输出输送给另一个命令，<br>但管道本身也是有限制的，当你用管道从一个命令向另一个命令传递输出结果时，输出结果立即被使用，<br>但有时候，你可能需要保存输出结果一段时间，以便以后可以使用（或重用），这个时候管道就应该下场，轮到变量上场了。<br>人们很容易将变量想象成一个仓库，但在PowerShell中，变量可以保存命令的完整输出，<br>例如，假设你想保存服务器处于运行中的进程列表，你可以将它赋给一个变量，如：<br><code>$a = Get-Process</code><br>在这里，变量被命名为$a，如果你想使用这个变量，只需要简单地调用它的名称即可，<br>例如，键入$a便可在屏幕上打印变量的内容。<br>你可以将多个用管道连接的命令的最终输出赋给一个变量，只需要用一对小括号将命令括起来即可，<br>例如，假设你想按进程ID对运行中的进程进行排序，然后将结果输出给一个变量，你可以使用下面这个命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = (<span class="built_in">Get-Process</span> | <span class="built_in">Sort-Object</span> ID)</span><br></pre></td></tr></table></figure></li><li><p>@符号<br>通过使用@符号，你可以将列表内容转换成一个数组，<br>例如，下面的代码创建了一个名为$Procs的变量，它包含多行文本内容（一个数组）：<br><code>$procs = @{name=&quot;explorer&quot;,&quot;svchost&quot;}</code><br>使用变量时你也可以使用@符号，为了确保它作为数组而不是单个值处理，<br>例如，下面的代码将在我前面定义的变量上运行<code>Get-Process</code> cmdlet命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Process</span> @procsWindows</span><br></pre></td></tr></table></figure></li></ol><p>将显示Windows资源管理器和Svchost使用的所有进程，注意变量前使用的<code>@</code>符号，而不是常见的<code>$</code>符号。</p><ol start="7"><li><p>Split<br>Split操作符根据你指定的字符拆分一个文本字符串，例如，假设你想将一个句子拆分成一个单词组成的一个数组，你可以使用下面的命令做到：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"This is a test"</span> -split <span class="string">" "</span></span><br></pre></td></tr></table></figure><p>拆分后的结果如下：<br><code>This is a test</code></p></li><li><p>Join<br>就像Split可以将一个文本字符串拆分成多块一样，Join的操作则是逆向的，将多个独立的块连接成一个整体，<br>例如，下面这行代码将会创建一个文本字符串，由我的名字和姓氏组成：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Brien"</span>,<span class="string">"Posey"</span> -join <span class="string">" "</span></span><br></pre></td></tr></table></figure><p>命令末尾双引号之间的空格告诉Windows在两个文本字符串之间插入一个空格。</p></li><li><p>断点<br>运行一个新创建的PowerShell脚本时，如果脚本有Bug，会遇到意想不到的后果，<br>保护自己的一个方法是在脚本的关键位置插入断点，这样你就可以确保脚本正常运行先，然后再处理可能存在的问题。<br>插入断点最简单的方法是根据行号插入，例如，假设你要在第10行插入一个断点，可以使用下面的命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">New-PSBreakpoint -Script C:\Scripts\a.ps1 -Line <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#你也可以将断点绑定到变量上，如果你希望你的脚本任何时候都可以修改a$的内容，可以使用下面的命令：</span></span><br><span class="line">New-PSBreakpoint -Script C:\scripts\a.ps1 -variables a </span><br><span class="line"><span class="comment">#注意，在变量名后并没有包括美元符号。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以和`PSBreakpoint`一起使用的动词包括`New`，`Get`，`Enable`，`Disable`和`Remove`。</span></span><br></pre></td></tr></table></figure></li><li><p>Step<br>调试一个脚本时，有时可能需要逐行运行脚本，这时你可以使用<code>Step-Into</code> cmdlet命令，它会使脚本一行一行地执行，不管有没有设置断点，如果你想从这种步进式运行模式退出来，使用<code>Step-Out</code> cmdlet命令即可，<br>但需要注意的是，使用<code>Step-Out</code> cmdlet命令后，断点仍然有效。<br>顺便说一句，如果你的脚本使用了函数，你可能对<code>Step-Out</code> cmdlet更感兴趣，<code>Step-Out</code> 的工作方式和<code>Step-Into</code> 一样，不过，如果调用了一个函数，Windows不会逐步执行，整个函数将会一次性执行。</p></li></ol><h3 id="因此PowerShell实际是一门独立的脚本语言了"><a href="#因此PowerShell实际是一门独立的脚本语言了" class="headerlink" title="因此PowerShell实际是一门独立的脚本语言了"></a>因此PowerShell实际是一门独立的脚本语言了</h3><h2 id="PowerShell能干什么？"><a href="#PowerShell能干什么？" class="headerlink" title="PowerShell能干什么？"></a>PowerShell能干什么？</h2><h3 id="PowerShell的基本目标是使用户能够以交互方式或通过脚本更好、更容易地对系统进行管理控制，"><a href="#PowerShell的基本目标是使用户能够以交互方式或通过脚本更好、更容易地对系统进行管理控制，" class="headerlink" title="PowerShell的基本目标是使用户能够以交互方式或通过脚本更好、更容易地对系统进行管理控制，"></a>PowerShell的基本目标是使用户能够以交互方式或通过脚本更好、更容易地对系统进行管理控制，</h3><p>为了达成这个目标，PowerShell提供了大量命令来执行各种管理任务，让用户轻松完成管理系统任务。</p><p>PowerShell能做下面这些事:</p><blockquote><p>.NET/.NET CORE编程, Registry, COM, WMI, ADSI. Exchange, Sharepoint,<br> Systems Center, Hyper-V, SQL. VMware vCenter, Cisco UCS,<br> Citrix XenApp and XenDesktop.，Azure, Excel 和 Office applications.<br> 基本上所有的微软产品都提供PowerShell接口。</p></blockquote><h4 id="1、管理进程"><a href="#1、管理进程" class="headerlink" title="1、管理进程"></a>1、管理进程</h4><p>前面已经提过管理系统进程的命令，管理进程常用命令就是<code>get-process</code>和<code>stop-process</code>，<code>get-process</code>获取进程之后可以直接用管道发送给<code>stop-process</code>结束进程。<br>比如，关闭打开的记事本，可以使用下面的命令很方便的关闭记事本。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-process</span> -Name notepad | <span class="built_in">stop-process</span></span><br></pre></td></tr></table></figure></p><h4 id="2、处理文件和文件夹"><a href="#2、处理文件和文件夹" class="headerlink" title="2、处理文件和文件夹"></a>2、处理文件和文件夹</h4><p>PowerShell使用<code>Get-ChildItem</code>获取文件夹中直接包含的所有项，<br>它有系统内置别名<code>dir</code>和<code>ls</code>，使用CMD和BASH的用户均可以轻松上手。<br>如果想查看<code>C:</code>中的文件夹和文件，直接使用<code>dir c:</code>，PowerShell立刻就会列出<code>C:</code>中的文件和文件夹。<br>其它处理文件和文件夹的命令有<code>Copy-Item</code>、<code>New-Item</code>、<code>Remove-Item</code>等，<br>具体用法可以使用<code>get-help</code>然后跟命令名称即可查询。</p><h4 id="3、处理系统服务"><a href="#3、处理系统服务" class="headerlink" title="3、处理系统服务"></a>3、处理系统服务</h4><p>可以像管理进程一样管理系统服务，</p><ul><li><code>Get-Service</code>命令获取服务列表，</li><li><code>Stop-Service</code>命令停止服务，</li><li><code>Start-Service</code>命令启动服务，</li><li><code>Suspend-Service</code>命令挂起服务，</li><li><code>Restart-Service</code>命令重启服务，</li><li><code>Set-Service</code>服务设置服务属性。<br>如果想一次性启动已经停止的服务，可以使用以下命令：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-service</span> | <span class="built_in">where-object</span> &#123;<span class="variable">$_</span>.Status <span class="nomarkup">-eq</span> <span class="string">"Stopped"</span>&#125; -exclude</span><br></pre></td></tr></table></figure></li></ul><p><strong>下面这行命名会把除wisvc之外的命令都启动，这只是一个示例，不要在自己电脑使用，启动所有服务会消耗大量系统资源。</strong><br><code>wisvc | start-service</code></p><h4 id="4、处理注册表"><a href="#4、处理注册表" class="headerlink" title="4、处理注册表"></a>4、处理注册表</h4><p>PowerShell可以非常方便的处理注册表项目，<br>与进程和服务不同的是，PowerShell并未提供专用的注册表命令，而是使用处理文件和文件夹的命令，<br>这并不奇怪，PowerShell为用户提供了注册表驱动器，可以很好的处理注册表项目。<br>由于注册表对系统<strong>非常重要</strong>，<strong>错误处理注册表也许会导致系统出问题</strong>，<br>处理注册表，特别是删除注册表项目要<strong>非常小心</strong>，<br>最好能在处理注册表项目之前先<strong>备份</strong>要处理的项目。<strong>没有管理员权限也能处理部分注册表项目</strong>，<br>这与regedit注册表编辑器不同，注册表编辑器必须使用管理员权限打开，然后才能操作项目。</p><h4 id="5、处理其它任务"><a href="#5、处理其它任务" class="headerlink" title="5、处理其它任务"></a>5、处理其它任务</h4><p>PowerShell还可以处理证书、防火墙、appx应用、打印机等任务，篇幅所限，不具体举例。大家可以使用get-command命令查找相关命令。</p><h4 id="6、编写脚本程序"><a href="#6、编写脚本程序" class="headerlink" title="6、编写脚本程序"></a>6、编写脚本程序</h4><p>借助于.Net/.Net Core 实际上来说其他的编程语言能干什么，<br>PowerShell都可以做到，PowerShell能够充分利用.Net类型和COM对象，<br>来简单地与各种系统交互，完成各种复杂的、自动化的操作，因此PowerShell现在也是很不错的编程语言了，<br>有人还做出了ps1 to exe的脚本，可以将PowerShell编写的脚本文件编译成exe可执行文件。</p><h2 id="一个有趣的例子"><a href="#一个有趣的例子" class="headerlink" title="一个有趣的例子"></a>一个有趣的例子</h2><p>这是PowerShell界常见的一段神代码，很多初学者被其带入了PowerShell的大门。<br>有效代码不过20来行，作用是把当前系统中最占内存的10个进程的数据发送到Excel中，并绘制成三维饼图。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新的excel com对象</span></span><br><span class="line"><span class="variable">$objExcel</span> = <span class="built_in">New-Object</span> -comobject Excel.Application</span><br><span class="line"><span class="variable">$objExcel</span>.Visible = <span class="literal">$True</span></span><br><span class="line"><span class="variable">$objWorkbook</span> = <span class="variable">$objExcel</span>.Workbooks.Add()</span><br><span class="line"><span class="variable">$objWorksheet</span> = <span class="variable">$objWorkbook</span>.Worksheets.Item(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把信息写入excel</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">0</span></span><br><span class="line"><span class="variable">$first10</span> = (ps | sort ws -Descending | select -first <span class="number">10</span>)</span><br><span class="line"><span class="variable">$first10</span> | <span class="keyword">foreach</span> -Process &#123;<span class="variable">$i</span>++; <span class="variable">$objWorksheet</span>.Cells.Item(<span class="variable">$i</span>,<span class="number">1</span>) = <span class="variable">$_</span>.name; <span class="variable">$objWorksheet</span>.Cells.Item(<span class="variable">$i</span>,<span class="number">2</span>) = <span class="variable">$_</span>.ws&#125;</span><br><span class="line"><span class="variable">$otherMem</span> = (ps | measure ws -s).Sum - (<span class="variable">$first10</span> | measure ws -s).Sum</span><br><span class="line"><span class="variable">$objWorksheet</span>.Cells.Item(<span class="number">11</span>,<span class="number">1</span>) = <span class="string">"Others"</span>; <span class="variable">$objWorksheet</span>.Cells.Item(<span class="number">11</span>,<span class="number">2</span>) = <span class="variable">$otherMem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画饼图</span></span><br><span class="line"><span class="variable">$objCharts</span> = <span class="variable">$objWorksheet</span>.ChartObjects()</span><br><span class="line"><span class="variable">$objChart</span> = <span class="variable">$objCharts</span>.Add(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line"><span class="variable">$objChart</span>.Chart.SetSourceData(<span class="variable">$objWorksheet</span>.range(<span class="string">"A1:B11"</span>), <span class="number">2</span>)</span><br><span class="line"><span class="variable">$objChart</span>.Chart.ChartType = <span class="number">70</span></span><br><span class="line"><span class="variable">$objChart</span>.Chart.ApplyDataLabels(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#暂停</span></span><br><span class="line">pause</span><br><span class="line"><span class="variable">$objExcel</span>.Quit()</span><br><span class="line"><span class="variable">$objExcel</span> = <span class="literal">$null</span></span><br><span class="line">[GC]::Collect()</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果:"></a>执行结果:</h3><p><img src="https://cdn.jsdelivr.net/gh/lollipopnougat/website-calculator/img/screenshot.png" alt="执行结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Powershell&quot;&gt;&lt;a href=&quot;#Powershell&quot; class=&quot;headerlink&quot; title=&quot;Powershell&quot;&gt;&lt;/a&gt;Powershell&lt;/h2&gt;&lt;p&gt;PowerShell 是一种命令行外壳程序和脚本环境，&lt;br&gt;使命令行用户和脚本编写者可以方便地使用 .NET Framework的强大功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/lollipopnougat/website-calculator/img/powershell.png&quot; alt=&quot;PowerShell&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PowerShell" scheme="https://crepe.coding.me/Crepeblog/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>元旦快乐</title>
    <link href="https://crepe.coding.me/Crepeblog/2019/01/01/%E5%85%83%E6%97%A6%E5%BF%AB%E4%B9%90/"/>
    <id>https://crepe.coding.me/Crepeblog/2019/01/01/元旦快乐/</id>
    <published>2018-12-31T16:12:12.000Z</published>
    <updated>2019-02-11T12:59:58.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019元旦快乐"><a href="#2019元旦快乐" class="headerlink" title="2019元旦快乐"></a>2019元旦快乐</h2><p><img src="https://cdn.jsdelivr.net/gh/lollipopnougat/website-calculator/img/newyear.gif" alt="Happy New Year!"></p><a id="more"></a><h4 id="相逢是首悠扬的歌，相识是杯醇香的酒，"><a href="#相逢是首悠扬的歌，相识是杯醇香的酒，" class="headerlink" title="相逢是首悠扬的歌，相识是杯醇香的酒，"></a>相逢是首悠扬的歌，相识是杯醇香的酒，</h4><h4 id="相处是那南飞的雁，相知是根古老的藤。"><a href="#相处是那南飞的雁，相知是根古老的藤。" class="headerlink" title="相处是那南飞的雁，相知是根古老的藤。"></a>相处是那南飞的雁，相知是根古老的藤。</h4><h4 id="健康是最佳的礼物，知足是最大的财富，"><a href="#健康是最佳的礼物，知足是最大的财富，" class="headerlink" title="健康是最佳的礼物，知足是最大的财富，"></a>健康是最佳的礼物，知足是最大的财富，</h4><h4 id="信心是最可贵的品德，关心是最真挚的问候，"><a href="#信心是最可贵的品德，关心是最真挚的问候，" class="headerlink" title="信心是最可贵的品德，关心是最真挚的问候，"></a>信心是最可贵的品德，关心是最真挚的问候，</h4><h4 id="牵挂是最无私的思念，祝福是最美好的话语！"><a href="#牵挂是最无私的思念，祝福是最美好的话语！" class="headerlink" title="牵挂是最无私的思念，祝福是最美好的话语！"></a>牵挂是最无私的思念，祝福是最美好的话语！</h4><p><img src="https://cdn.jsdelivr.net/gh/lollipopnougat/website-calculator/img/HappyNewYear.jpg" alt="Happy New Year!"></p><h1 id="在此献上最美好的祝福"><a href="#在此献上最美好的祝福" class="headerlink" title="在此献上最美好的祝福"></a>在此献上最美好的祝福</h1><h2 id="祝各位朋友们2019年新年快乐！平安幸福！"><a href="#祝各位朋友们2019年新年快乐！平安幸福！" class="headerlink" title="祝各位朋友们2019年新年快乐！平安幸福！"></a>祝各位朋友们2019年新年快乐！平安幸福！</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2019元旦快乐&quot;&gt;&lt;a href=&quot;#2019元旦快乐&quot; class=&quot;headerlink&quot; title=&quot;2019元旦快乐&quot;&gt;&lt;/a&gt;2019元旦快乐&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/lollipopnougat/website-calculator/img/newyear.gif&quot; alt=&quot;Happy New Year!&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="节日祝福" scheme="https://crepe.coding.me/Crepeblog/tags/%E8%8A%82%E6%97%A5%E7%A5%9D%E7%A6%8F/"/>
    
      <category term="元旦" scheme="https://crepe.coding.me/Crepeblog/tags/%E5%85%83%E6%97%A6/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的程序设计</title>
    <link href="https://crepe.coding.me/Crepeblog/2018/12/30/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://crepe.coding.me/Crepeblog/2018/12/30/面向对象的程序设计/</id>
    <published>2018-12-30T07:06:15.000Z</published>
    <updated>2019-02-11T13:00:38.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的程序设计"><a href="#面向对象的程序设计" class="headerlink" title="面向对象的程序设计"></a>面向对象的程序设计</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>面向对象程序设计（英语：Object-oriented programming，abbr：OOP）是一种程序设计范型，同时也是一种程序开发的方法。<br>对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据<strong>封装</strong>其中，以提高软件的<strong>重用性</strong>、<strong>灵活性</strong>和<strong>扩展性</strong>。<br>面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想刚好相反，<br>传统的程序设计主张将程序看作一系列函数的集合，或者直接就是一系列对电脑下达的指令。</p><a id="more"></a><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个个体，即对象。<br>目前已经被证实的是，面向对象程序设计推广了程序的<strong>灵活性</strong>和<strong>可维护性</strong>，并且在大型项目设计中广为应用。<br>此外，面向对象程序设计要比以往的做法更加便于学习，因为它能够让人们更简单地设计并维护程序，使得程序更加便于分析、设计、理解。</p><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><p>面向对象是在结构化设计方法出现很多问题的情况下应运而生的。</p><p>结构化设计方法求解问题的基本策略是从功能的角度审视问题域。<br>它将应用程序看成实现某些特定任务的功能模块，其中子过程是实现某项具体操作的底层功能模块。<br>在每个功能模块中，用数据结构描述待处理数据的组织形式，用算法描述具体的操作过程。<br>面对日趋复杂的应用系统，这种开发思路在下面几个方面逐渐暴露了一些弱点。</p><h4 id="1-审视问题域的视角"><a href="#1-审视问题域的视角" class="headerlink" title="1. 审视问题域的视角"></a>1. 审视问题域的视角</h4><blockquote><p>在现实世界中存在的客体是问题域中的主角，所谓客体是指客观存在的对象实体和主观抽象的概念，他是人类观察问题和解决问题的主要目标。例如，对于一个学校学生管理系统来说，无论是简单还是复杂，始终是围绕学生和老师这两个客体实施。在自然界，每个客体都具有一些属性和行为，例如学生有学号、姓名、性别等属性，以及上课、考试、做实验等行为。因此，每个个体都可以用属性和行为来描述。<br>通常人类观察问题的视角是这些客体，客体的属性反应客体在某一时刻的状态，客体的行为反映客体能从事的操作。这些操作附在客体之上并能用来设置、改变和获取客体的状态。任何问题域都有一系列的客体，因此解决问题的基本方式是让这些客体之间相互驱动、相互作用，最终使每个客体按照设计者的意愿改变其属性状态。<br>结构化设计方法所采用的设计思路不是将客体作为一个整体，而是将依附于客体之上的行为抽取出来，以功能为目标来设计构造应用系统。这种做法导致在进行程序设计的时候，不得不将客体所构成的现实世界映射到由功能模块组成的解空间中，这种变换过程，不仅增加了程序设计的复杂程度，而且背离了人们观察问题和解决问题的基本思路。另外，再仔细思考会发现，在任何一个问题域中，客体是稳定的，而行为是不稳定的。例如，不管是国家图书馆，还是学校图书馆，还是国际图书馆，都会含有图书这个客体，但管理图书的方法可能是截然不同的。结构化设计方法将审视问题的视角定位于不稳定的操作之上，并将描述客体的属性和行为分开，使得应用程序的日后维护和扩展相当困难，甚至一个微小的变动，都会波及到整个系统。面对问题规模的日趋扩大、环境的日趋复杂、需求变化的日趋加快，将利用计算机解决问题的基本方法统一到人类解决问题的习惯方法之上，彻底改变软件设计方法与人类解决问题的常规方式扭曲的现象迫在眉睫，这是提出面向对象的首要原因。</p></blockquote><h4 id="2-抽象级别"><a href="#2-抽象级别" class="headerlink" title="2. 抽象级别"></a>2. 抽象级别</h4><blockquote><p>抽象是人类解决问题的基本法宝。良好的抽象策略可以控制问题的复杂程度，增强系统的通用性和可扩展性。抽象主要包括过程抽象和数据抽象。结构化设计方法应用的是过程抽象。所谓过程抽象是将问题域中具有明确功能定义的操作抽取出来，并将其作为一个实体看待。这种抽象级别对于软件系统结构的设计显得有些武断，并且稳定性差，导致很难准确无误地设计出系统的每一个操作环节。一旦某个客体属性的表示方式发生了变化，就有可能牵扯到已有系统的很多部分。而数据抽象是较过程抽象更高级别的抽象方式，将描述客体的属性和行为绑定在一起，实现统一的抽象，从而达到对现实世界客体的真正模拟。</p></blockquote><h4 id="3-封装体"><a href="#3-封装体" class="headerlink" title="3. 封装体"></a>3. 封装体</h4><blockquote><p>封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。该逻辑单元负责将所描述的属性隐藏起来，外界对客体内部属性的所有访问只能通过提供的用户接口实现。这样做既可以实现对客体属性的保护作用，又可以提高软件系统的可维护性。只要用户接口不改变，任何封装体内部的改变都不会对软件系统的其他部分造成影响。结构化设计方法没有做到客体的整体封装，只是封装了各个功能模块，而每个功能模块可以随意地对没有保护能力客体属性实施操作，并且由于描述属性的数据与行为被分割开来，所以一旦某个客体属性的表达方式发生了变化，或某个行为效果发生了改变，就有可能对整个系统产生影响。</p></blockquote><h4 id="4-可重用性"><a href="#4-可重用性" class="headerlink" title="4. 可重用性"></a>4. 可重用性</h4><blockquote><p>可重用性标识着软件产品的可复用能力，是衡量一个软件产品成功与否的重要标志。当今的软件开发行业，人们越来越追求开发更多的、更有通用性的可重用构件，从而使软件开发过程彻底改善，即从过去的语句级编写发展到现在的构件组装，从而提高软件开发效率，推动应用领域迅速扩展。然而，结构化程序设计方法的基本单位是模块，每个模块只是实现特定功能的过程描述，因此，它的可重用单位只能是模块。例如，在C语言编写程序时使用大量的标准函数。但对于今天的软件开发来说，这样的重用力度显得微不足道，而且当参与操作的某些数据类型发生变化时，就不能够再使用那些函数了。因此，渴望更大力度的可重用构件是如今应用领域对软件开发提出的新需求。</p></blockquote><p>上述弱点驱使人们寻求一种新的程序设计方法，以适应现代社会对软件开发的更高要求，面向对象由此产生。</p><p>面向对象程序设计从80年代以后成为了一种主导思想，这主要归功于C++在编写图形界面的应用。<br>在图形用户界面（GUI）日渐崛起的情况下，面向对象程序设计很好地<em>适应了潮流</em>。<br>面向对象程序设计的思想也使<strong>事件处理式</strong>的程序设计更加广泛被应用</p><h2 id="抽象的示例"><a href="#抽象的示例" class="headerlink" title="抽象的示例"></a>抽象的示例</h2><p>假如我们要写一个程序模拟一只羊，使用C语言面向过程的方法，<br>首先想到的是开一个结构体，然后定义几个变量:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sheep</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> height;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sheep Jeff; <span class="comment">//定义一只叫Jeff的羊</span></span><br></pre></td></tr></table></figure><p>很容易，现在Jeff要跑，怎么办？<br>于是就用一个run函数，把Jeff作为一个参数传递来实现:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(Sheep sheep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(Jeff);</span><br></pre></td></tr></table></figure><p>也很容易是吧，现在我们的Jeff遇到了羊大侠，羊大侠是站着跑的，怎么描述羊大侠站着跑呢？<br>再写一个函数，站着跑？那假如又遇到穿鞋跑的怎么办？</p><p>这时候如果使用面向对象的方法，将跑步作为对象的成员函数，把跑步的方法作为参数传递；<br>这样，所有的羊都有了一种叫跑步的方法，就方便多了:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="built_in">string</span> method=<span class="string">"default"</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mie</span><span class="params">()</span></span>;<span class="comment">//咩</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">double</span> height,weight;</span><br><span class="line">&#125;;<span class="comment">//定义一个Sheep类</span></span><br><span class="line"></span><br><span class="line">Sheep Jeff;</span><br><span class="line">Jeff.run(); <span class="comment">//Jeff使用默认的方法跑步</span></span><br><span class="line"></span><br><span class="line">Sheep YangDaXia;</span><br><span class="line">YangDaXia.run(<span class="string">"onFoot"</span>); <span class="comment">//羊大侠站着跑</span></span><br><span class="line"></span><br><span class="line">Sheep XiYangYang;</span><br><span class="line">XiYangYang.run(<span class="string">"shoes"</span>); <span class="comment">//喜羊羊穿鞋跑</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象的程序设计&quot;&gt;&lt;a href=&quot;#面向对象的程序设计&quot; class=&quot;headerlink&quot; title=&quot;面向对象的程序设计&quot;&gt;&lt;/a&gt;面向对象的程序设计&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;面向对象程序设计（英语：Object-oriented programming，abbr：OOP）是一种程序设计范型，同时也是一种程序开发的方法。&lt;br&gt;对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据&lt;strong&gt;封装&lt;/strong&gt;其中，以提高软件的&lt;strong&gt;重用性&lt;/strong&gt;、&lt;strong&gt;灵活性&lt;/strong&gt;和&lt;strong&gt;扩展性&lt;/strong&gt;。&lt;br&gt;面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想刚好相反，&lt;br&gt;传统的程序设计主张将程序看作一系列函数的集合，或者直接就是一系列对电脑下达的指令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="面向对象" scheme="https://crepe.coding.me/Crepeblog/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="C/C++" scheme="https://crepe.coding.me/Crepeblog/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>The first one</title>
    <link href="https://crepe.coding.me/Crepeblog/2018/12/30/The-first-one/"/>
    <id>https://crepe.coding.me/Crepeblog/2018/12/30/The-first-one/</id>
    <published>2018-12-30T03:44:32.000Z</published>
    <updated>2019-02-11T12:59:58.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试用页面"><a href="#测试用页面" class="headerlink" title="测试用页面"></a>测试用页面</h2><a id="more"></a><p>第一个第一个第一个哈哈哈哈哈哈哈哈哈哈![^1]<br>[^1]: 这是脚注</p><h1 id="这是1级标题"><a href="#这是1级标题" class="headerlink" title="这是1级标题"></a>这是1级标题</h1><p><em>这是斜体</em><br><strong>这是加粗</strong><br><strong><em>这是斜体加粗</em></strong></p><p><del>这是删除</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello,world!"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//这是代码段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="这是2级标题"><a href="#这是2级标题" class="headerlink" title="这是2级标题"></a>这是2级标题</h2><p><code>这是代码块</code></p><h3 id="这是3级标题"><a href="#这是3级标题" class="headerlink" title="这是3级标题"></a>这是3级标题</h3><blockquote><p>这是引述</p><blockquote><p>这是引述嵌套</p></blockquote></blockquote><p><img src="https://www.baidu.com/img/dong_418ce2c6c5171fb4cb0d4d1edb4fab68.gif" alt="这是图片"> </p><hr><h4 id="这是4级标题"><a href="#这是4级标题" class="headerlink" title="这是4级标题"></a>这是4级标题</h4><p><a href="http://www.baidu.com" target="_blank" rel="noopener">这是百度一下</a></p><p>-[x] 选项一<br>-[ ] 选项二<br>-[ ] 选项三</p><hr><h5 id="这是5级标题"><a href="#这是5级标题" class="headerlink" title="这是5级标题"></a>这是5级标题</h5><ul><li>这是无序列表</li><li>这是无序列表</li><li>这是无序列表</li></ul><ol><li>这是有序列表</li><li>这是有序列表</li><li>这是有序列表</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试用页面&quot;&gt;&lt;a href=&quot;#测试用页面&quot; class=&quot;headerlink&quot; title=&quot;测试用页面&quot;&gt;&lt;/a&gt;测试用页面&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
